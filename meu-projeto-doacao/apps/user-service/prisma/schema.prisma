// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("USER_DATABASE_URL")
}

// Enums
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
  BLOCKED
}

enum DocumentType {
  CPF
  CNPJ
  PASSPORT
  OTHER
}

enum VerificationStatus {
  PENDING
  SUBMITTED
  REVIEWING
  APPROVED
  REJECTED
  EXPIRED
}

enum WalletProvider {
  METAMASK
  WALLET_CONNECT
  COINBASE_WALLET
  TRUST_WALLET
  PHANTOM
  OTHER
}

enum BlockchainNetwork {
  ETHEREUM_MAINNET
  ETHEREUM_SEPOLIA
  POLYGON
  BSC
  ARBITRUM
  OPTIMISM
  SOLANA
  BASE
}

enum UserReputation {
  TRUSTED      // Good standing, reliable
  GOOD         // Generally positive behavior
  NEUTRAL      // New or average user
  WARNING      // Suspect behavior, caution advised
  DANGEROUS    // High risk, avoid interactions
}

model User {
  id                String         @id @default(uuid())

  // Public identity
  username          String         @unique

  // Status
  status            UserStatus     @default(PENDING_VERIFICATION)
  reputation        UserReputation @default(NEUTRAL) @map("reputation_score")

  // Permissions and roles
  isAdmin          Boolean         @default(false) @map("is_admin")
  isModerator      Boolean         @default(false) @map("is_moderator")

  // Secondary logging by email and password
  email             String?        @unique
  emailVerified     Boolean        @default(false) @map("email_verified")
  passwordHash      String?        @map("password_hash")

  // Two-factor authentication (2FA)
  twoFactorEnabled  Boolean        @default(false) @map("two_factor_enabled")
  twoFactorSecret   String?        @map("two_factor_secret")
  twoFactorBackupCodes String?     @map("two_factor_backup_codes")

  // Login control
  loginFailedAttempts Int           @default(0) @map("login_failed_attempts")
  loginFailedLastAt   DateTime?    @map("login_failed_last_at")
  accountLockedUntil DateTime?    @map("account_locked_until")

  //Timestamps
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  lastLoginAt       DateTime?      @map("last_login_at")
  deletedAt         DateTime?      @map("deleted_at")

  // TODO: Relations


  @@map("users")
 //TODO: indexes
}
